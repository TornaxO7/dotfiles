# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio = [1, 4, 3]
sort_by = "alphabetical"
sort_sensitive = true
sort_reverse = false
sort_dir_first = true
linemode = "size"
show_hidden = false
show_symlink = true

[preview]
tab_size = 2
max_width = 600
max_height = 900
cache_dir = ""
ueberzug_scale = 1
ueberzug_offset = [0, 0, 0, 0]

[opener]
pdf = [{ run = "evince $1", block = false, orphan = true }]
edit = [{ run = "$EDITOR $@", block = true, for = "unix" }]
open = [{ run = "xdg-open $@", desc = "Open", for = "linux" }]
extract = [{ run = "ouch d $1", desc = "Extract here", for = "unix" }]
open-image = [{ run = "vimiv $@", block = false, orphan = true, for = "unix" }]
xournalpp = [{ run = "xournalpp $@", block = false, orphan = true }]

[open]
rules = [
	{ name = "*/", use = [
		"edit",
		"open",
		"reveal",
	] },

	{ mime = "text/*", use = [
		"edit",
		"reveal",
	] },
	{ mime = "image/*", use = [
		"open-image",
		"reveal",
	] },
	{ mime = "video/*", use = [
		"play",
		"reveal",
	] },
	{ mime = "audio/*", use = [
		"play",
		"reveal",
	] },
	{ mime = "inode/x-empty", use = [
		"edit",
		"reveal",
	] },

	{ mime = "application/json", use = [
		"edit",
		"reveal",
	] },
	{ mime = "*/javascript", use = [
		"edit",
		"reveal",
	] },

	{ name = "*.xopp", use = [
		"xournalpp",
	] },

	{ mime = "application/zip", use = [
		"extract",
		"reveal",
	] },
	{ mime = "application/gzip", use = [
		"extract",
		"reveal",
	] },
	{ mime = "application/x-tar", use = [
		"extract",
		"reveal",
	] },
	{ mime = "application/x-bzip", use = [
		"extract",
		"reveal",
	] },
	{ mime = "application/x-bzip2", use = [
		"extract",
		"reveal",
	] },
	{ mime = "application/x-7z-compressed", use = [
		"extract",
		"reveal",
	] },
	{ mime = "application/x-rar", use = [
		"extract",
		"reveal",
	] },
	{ mime = "application/xz", use = [
		"extract",
		"reveal",
	] },

	{ mime = "application/pdf", use = [
		"pdf",
	] },

	{ mime = "*", use = [
		"open",
		"reveal",
	] },
]

[tasks]
micro_workers = 10
macro_workers = 25
bizarre_retry = 5
image_alloc = 536870912  # 512MB
image_bound = [0, 0]
suppress_preload = false

[plugin]
preloaders = [
	{ name = "*", cond = "!mime", run = "mime", multi = true, prio = "high" },
	# Image
	{ mime = "image/vnd.djvu", run = "noop" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
]

previewers = [
	{ name = "*/", run = "folder", sync = true },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "*/xml", run = "code" },
	{ mime = "*/javascript", run = "code" },
	{ mime = "*/x-wine-extension-ini", run = "code" },
	# JSON
	{ mime = "application/json", run = "json" },
	# Image
	{ mime = "image/vnd.djvu", run = "noop" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Archive
	{ mime = "application/zip", run = "ouch l" },
	{ mime = "application/gzip", run = "ouch l" },
	{ mime = "application/x-tar", run = "ouch l" },
	{ mime = "application/x-bzip", run = "ouch l" },
	{ mime = "application/x-bzip2", run = "ouch l" },
	{ mime = "application/x-7z-compressed", run = "ouch l" },
	{ mime = "application/x-rar", run = "ouch l" },
	{ mime = "application/xz", run = "ouch l" },
	# Fallback
	{ name = "*", run = "file" },
]

[input]
# cd
cd_title = "Change directory:"
cd_origin = "top-center"

# create
create_title = "Create:"
create_origin = "center"
# create_offset = [0, 2, 50, 3]

# rename
rename_origin = "center"
# rename_offset = [0, 1, 50, 3]

# trash
trash_title = "Move {n} selected file{s} to trash? (y/N)"
trash_origin = "center"
# trash_offset = [0, 2, 50, 3]

# delete
delete_title = "Delete {n} selected file{s} permanently? (y/N)"
delete_origin = "center"
# delete_offset = [0, 2, 50, 3]

# filter
filter_title = "Filter:"
filter_origin = "center"
# filter_offset = [0, 2, 50, 3]

# find
find_title = ["Find next:", "Find previous:"]
find_origin = "center"
# find_offset = [0, 2, 50, 3]

# search
search_title = "Search:"
search_origin = "center"
# search_offset = [0, 2, 50, 3]

# shell
shell_title = ["Shell:", "Shell (block):"]
shell_origin = "center"
# shell_offset = [0, 2, 50, 3]

# overwrite
overwrite_title = "Overwrite an existing file? (y/N)"
overwrite_origin = "center"
# overwrite_offset = [0, 2, 50, 3]

# quit
quit_title = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "center"
# quit_offset = [0, 2, 50, 3]

[select]
open_title = "Open with:"
open_origin = "hovered"
rename_title = "Rename:"
open_offset = [0, 1, 50, 7]

[log]
enabled = false
